var _ = require("underscore");
var fs = require("fs");
var path = require("path");

var PATTERNS = [
	/(.*)\W+S?([0-9]{1,2})X?\W*?E([0-9]{1,2}).*\.(.+$)/i,
	/(.*)\W+([0-9]{1,2})\W*?x\W*?([0-9]{1,2}).*\.(.+$)/i
]
var regexes = {};
var matchTitles = {};

var getRegex = function(title) {
	var r  = regexes[title];
	if (!r) {
		r = new RegExp("^" + title.split(/\W/g).join("\\W") + ".*", "i");
		regexes[title]=r;
	}
	return r;
}
var getMatchTitle = function(title) {
	var m = matchTitles[title];
	if (!m) {
		m = title.split(/\W+/g).join(" "); 
		matchTitles[title] = m;
	}
	return m;
}

var mtl = {
getOps : function(source, target, options) {
	
	var files = _.filter(fs.readdirSync(source), function(f) {
		return fs.statSync(path.join(source,f)).isFile();
	});
	var videos = mtl.identifyVideos(files);
	var targets = _.filter(fs.readdirSync(target), function(f) {
		return fs.statSync(path.join(target,f)).isDirectory();
	});
	return mtl.identifyDestinations(videos, targets);
},
doOps : function(source, target, ops) {
	if (!ops) throw "no ops provided";
	for (var dir in ops) {
		var dirPath = path.join(target,dir);
		var files = ops[dir];
		files.forEach(function(file) {
			var sourcePath = path.join(source, file);
			var destPath = path.join(dirPath, file);
			fs.renameSync(sourcePath, destPath);
		});
	}
},
identifyVideos : function(files) {
	var output = {};
	for (var i in files) {
		var f = files[i];
		for (var p in PATTERNS) {
			var match =  PATTERNS[p].exec(f);
			if (match != null) {
				output[f] = {
					title : match[1],
					season : match[2],
					episode : match[3],
					format : match[4]
				};
				break;
			}
		}
	}
	//console.info(output);
	return output;
},
identifyDestinations : function(videos, target) {
	var ops = {};
	for (var filename in videos) {
		var meta = videos[filename];
		var regex = getRegex(meta.title);
		for (var i in target) {
			var t = target[i];
			var matchTitle = getMatchTitle(t);
			var test = regex.test(matchTitle);
			//console.info("matching %s with pattern -%s- against -%s- with result %s",filename, matchTitle,regex,test);
			//console.info(test, meta.format, meta.format === "mkv");
			if (test) {
				ops[t] = ops[t] || [];
				ops[t].push(filename);
				break;
			}
		}
	}
	return ops;
}
}
module.exports = mtl;

